{"version":3,"file":"static/js/677.d7cedeac.chunk.js","mappings":"mLACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,mBCahL,EATmB,SAACA,GAChB,OACI,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACI,SAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAjC,SAAsCJ,EAAMK,UCCxD,EAJgB,SAACL,GACb,OAAO,gBAAKC,UAAWC,EAAAA,QAAhB,SAA4BF,EAAMM,W,uCCoDvCC,GAAuBC,EAAAA,EAAAA,GAAiB,KAoBxCC,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,wBAAjBD,EAnBL,SAACV,GACpB,OACI,kBAAMY,SAAUZ,EAAMa,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EACXC,YAAa,WACbZ,KAAM,iBACNa,YAAa,qBACbC,SAAU,CAACC,EAAAA,EAAUb,QAKhC,0BACI,oDAOhB,EA/DgB,SAACP,GACb,IAAMqB,EAAQrB,EAAMsB,YAChBC,EAAiBF,EAAMG,YAAYC,KAAI,SAAAC,GAAM,OAAI,SAAC,EAAD,CAA4BrB,KAAMqB,EAAOrB,KAC7BD,GAAIsB,EAAOtB,IADNsB,EAAOtB,OAEzEuB,EAAmBN,EAAMO,aAAaH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAoBvB,QAASuB,EAAEvB,SAAjBuB,EAAEzB,OAmBnE,OACI,iBAAKH,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKqB,KAEL,iBAAKtB,UAAWC,EAAAA,SAAhB,WACE,SAACO,EAAD,CAAqBG,SAVT,SAACkB,GACnB9B,EAAM+B,WAAWD,EAAOE,oBAWhB,yBAAML,W,2FCvChBM,EAA6B,SAACZ,GAChC,MAAM,CACFa,OAAQb,EAAMc,KAAKD,S,ICuC3B,GAAeE,E,QAAAA,KAA6BC,EAAAA,EAAAA,KAtBpB,SAAChB,GACrB,MAAM,CACFC,YAAaD,EAAMC,gBAIA,SAACgB,GACxB,MAAO,CAIHP,WAAY,SAACC,GACTM,GAASC,EAAAA,EAAAA,GAAwBP,UDzBtC,SAA+BQ,GAA8B,IAC1DC,EADyD,0IAG3D,WACI,MAA6BC,KAAK1C,MAA7BkC,EAAL,EAAKA,OAAWS,GAAhB,YACA,OAAKT,GACE,SAACM,GAAD,UAAeG,KADF,SAAC,KAAD,CAAUxC,GAAI,eALqB,GAC/ByC,EAAAA,WAWhC,OAFqCP,EAAAA,EAAAA,IAAQJ,EAARI,CAAoCI,KCyB7E,CAA2GI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__kKKo4\",\"dialogsItems\":\"Dialogs_dialogsItems__OBYPm\",\"active\":\"Dialogs_active__gyc8b\",\"messages\":\"Dialogs_messages__qV69u\",\"message\":\"Dialogs_message__-1KFU\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogItemType} from \"../../../redux/state\";\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {MessagePropsType} from \"../../../redux/state\";\r\n\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React, {useEffect} from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPage} from \"../../redux/state\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {FormControl} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLenghtCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype DialogsNewType = {\r\n    updateNewMessageText: (text: string) => void\r\n    addMessage: (values: string) => void\r\n    dialogsPage: DialogsPage;\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nconst Dialogs = (props: DialogsNewType) => {\r\n    const state = props.dialogsPage\r\n    let dialogsElement = state.dialogsData.map(dialog => <DialogItem key={dialog.id} name={dialog.name}\r\n                                                                     id={dialog.id}/>);\r\n    let messagesElements = state.messagesData.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n    // let newMessageElement: RefObject<HTMLTextAreaElement> = React.createRef();\r\n\r\n    // const addMessage = () => {\r\n    //     props.addMessage();\r\n    // }\r\n\r\n    // const onMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let text = e.target.value;\r\n    //     props.updateNewMessageText(text);\r\n    // }\r\n\r\n    // if(!props.isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n    const addNewMessage = (values: any) => {\r\n        props.addMessage(values.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n              <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// type FormDataType = {\r\n//     NewMessageBody: string\r\n// }\r\n\r\nconst maxLenghtCreator100 =  maxLenghtCreator(100)\r\nconst AddMessageForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={FormControl}\r\n                       elementType={'textarea'}\r\n                       name={'newMessageText'}\r\n                       placeholder={'Enter your message'}\r\n                       validate={[required, maxLenghtCreator100]}/>\r\n                {/*<textarea*/}\r\n                {/*onChange={onMessageChange}*/}\r\n                {/*value={state.newMessageText}></textarea>*/}\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType2} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType2): MapStatePropsType => {\r\n    return{\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T> (Component: ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStatePropsType> {\r\n\r\n        render() {\r\n            let {isAuth, ...restProps} = this.props;\r\n            if (!isAuth) return <Redirect to={\"/login\"}/>\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\n\r\n\r\n//функциональная компонента\r\n\r\n// export const withAuthRedirect = (Component) => {\r\n// function Redirect Component (props: MapStatePropsType){\r\n//         if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n//         return <Component {...props}/>\r\n//     }\r\n// }","import React, {ChangeEvent, RefObject} from 'react';\r\nimport {StateType, TDialogsPage} from \"../../redux/state\";\r\nimport {AddMessageActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType2} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n// const DialogsContainer = (props: AppStoreType) => {\r\n//\r\n//     const addMessage = () => {\r\n//         props.store.dispatch(AddMessageActionCreator());\r\n//     }\r\n//\r\n//     const onMessageChange = (text: string) => {\r\n//         props.store.dispatch(UpdateNewMessageText(text));\r\n//     }\r\n//\r\n//     return <Dialogs updateNewMessageText={onMessageChange}\r\n//                     addMessage={addMessage}\r\n//                     dialogsPage={props.store.getState().dialogsPage}/>\r\n// }\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType2) => {\r\n    return{\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        // updateNewMessageText: (text: string) => {\r\n        //     dispatch(UpdateNewMessageText(text));\r\n        // },\r\n        addMessage: (newMessageText: string) => {\r\n            dispatch(AddMessageActionCreator(newMessageText));\r\n        }\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n//\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n//\r\n// export default DialogsContainer;\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps),withAuthRedirect)(Dialogs);"],"names":["props","className","s","to","id","name","message","maxLenghtCreator100","maxLenghtCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","FormControl","elementType","placeholder","validate","required","state","dialogsPage","dialogsElement","dialogsData","map","dialog","messagesElements","messagesData","m","values","addMessage","newMessageText","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","AddMessageActionCreator","Component","RedirectComponent","this","restProps","React","Dialogs"],"sourceRoot":""}